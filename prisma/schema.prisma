generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model item {
  id          Int      @id @default(autoincrement())
  item_name   String   @db.VarChar(50)
  description String?  @db.VarChar(150)
  amount      Int      @default(1)
  borrow      borrow[]
}

model person {
  id           Int      @id @default(autoincrement())
  person_name  String   @db.VarChar(50)
  phone_number String?  @db.VarChar(150)
  address      Int?
  borrow       borrow[]
}

model AuthUser {
  id           String        @id @unique
  username     String        @db.VarChar(50)
  password     String        @db.Char(65)
  email        String?       @db.VarChar(150)
  auth_session AuthSession[]
  auth_key     AuthKey[]
  borrow       borrow[]

  @@map("auth_user")
}

model borrow {
  borrowid     Int       @id @default(autoincrement())
  borrowItem   item      @relation(fields: [itemid], references: [id])
  borrowPerson person    @relation(fields: [personid], references: [id])
  user         AuthUser  @relation(fields: [userid], references: [id])
  itemid       Int
  personid     Int
  userid       String
  borrowDate   DateTime  @db.Date
  returnDate   DateTime? @db.Date
  amount       Int       @default(1)
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}
